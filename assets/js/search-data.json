{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # Title &gt; Awesome summary - toc: true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . #collapse-hide import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . #collapse-show cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # single-value selection over [Major_Genre, MPAA_Rating] pairs # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(movies).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(movies).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=alt.Y(&#39;IMDB_Rating:Q&#39;, axis=alt.Axis(minExtent=30)), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=600, height=400 ) . Example 3: More Tooltips . # select a point for which to provide details-on-demand label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=700, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; df = pd.read_json(movies) # display table with pandas df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://abodacs.github.io/abodacs.github.io/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Footnotes . This is the footnote. &#8617; . |",
            "url": "https://abodacs.github.io/abodacs.github.io/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Do more with less",
            "content": ". it’s much more rewarding to do more with less, Donald Knuth . Measure yourself . If You Can’t Measure It, You Can’t optimize It. Use meaningful metrics things like how many tasks you finish in a day or even how many hours you work. So start with profiling your daily activity with profiling I mean things like answering emails, meetings, calls every little thing you make. . Mastering your tools . Your OS, IDE, browser for web development and any supporting tools (database management tool, source control tool, etc ).Best use of these tools can save your times.start with frequent tasks that take you time, so you navigate through code pages take ten seconds and you know shortcut do that in 2 seconds. I have a tip I use for things when working with new tools google for “tips and tricks for X” and by uses this tip it can save you numerous hours. . Define term “DONE” . Done means done simply isn’t it, the word “done but x and y” doesn’t mean done. So define done means code is tested and has desired business impact define your checklist. .",
            "url": "https://abodacs.github.io/abodacs.github.io/tech%20lead/2016/08/16/do-more-with-less.html",
            "relUrl": "/tech%20lead/2016/08/16/do-more-with-less.html",
            "date": " • Aug 16, 2016"
        }
        
    
  
    
        ,"post3": {
            "title": "The secret ingredient of successful Startup/Company",
            "content": "The secret ingredient of successful Startup/Company . — No Secret ingredient has just followed the recipe. . Company Culture is the recipe for the success of any company. For most companies to have ping-pong tables and free snacks this company culture but these things do not work alone. Providing employee&#39;s with a sense of safety and well-being and good policies, these promote the culture and happy employees, which ultimately leads to happy customers. . ### What is company culture? . Culture represents the collective values, beliefs, and principles of members and is a product of such factors as history, product, market, technology, strategy, type of employees, management style, and national culture; culture includes the company&#39;s vision, values, norms, systems, symbols, language, assumptions, beliefs, and habits. wikipedia It is what the firm says about itself, usually manifested in its vision and mission statement, I encourage to written both and put them in an obvious place in your firm. . Culture mirrors leadership . To understand a company&#39;s culture, look at what people do, If people are open, forthright and engaged, you know that is the nature of the company&#39;s culture. In contrast, if people are defensive and passive you also understand the company&#39;s culture. It is simple – but not easy – to build the culture you want. . How to cook your culture? . ” If you know where you are going, it doesn&#39;t matter where you start.” Anonymous It starts by asking your employees and make a list of items.” What would you like more of in the workplace? “ you will get answers like : . Better communication and more information. | A feeling of safety | More focus on getting work done and less on politics. | More involvement in decisions that affect me. | etc. | . You can also focus on areas to see what kind of atmosphere your workplace has developed . Clarity of purpose: Your employees have to feel that what they do matters, and has a measurable impact on the success of the company. | An environment of trust and engagement: Your employees should feel safe and involvement in decisions that affect them. | Continued learning: Your company will go nowhere when your employees didn&#39;t continually improve themselves. | Celebrate Successes: You should celebrate successes; even small ones. your team needs to be reminded from time to time that they are on track. | Make small changes in how they do what they do every day, changes that show that they understand and encourage the values people want. . In a good work culture, everybody wins. .",
            "url": "https://abodacs.github.io/abodacs.github.io/startup%20culture/2016/08/05/the-secret-ingredient-of-successful.html",
            "relUrl": "/startup%20culture/2016/08/05/the-secret-ingredient-of-successful.html",
            "date": " • Aug 5, 2016"
        }
        
    
  
    
        ,"post4": {
            "title": "Dealing with Legacy Code",
            "content": "Our life as developers’ would be easy if we write only new code.No bug fixing or editing yesterday code It&#39;d be pretty nice, right? . Definition of Legacy code . . Legacy code was defined in many ways and there is no common definition to it even in wikipedia, may by. . Code that&#39;s part of an older version of the software. | Code that relates to a no-longer supported hardware or software dependency. | Code inherited from someone else. | Code that isn&#39;t covered by automated unit tests. | . To me, legacy code simply codes without tests. ~ Michael Feathers . Well, that is the first formal definition of the expression legacy code, published by Michael Feathers in his book Working Effectively with Legacy Code. it seems that the Legacy code is “Difficult to change” but the term “Difficult to change” is so vague and we need a solution. But guess it mostly like this picture when refactoring legacy code. . Refactoring legacy code . ### Defensive strategies. . Be conventional. | Following standards and language conventions make code easy to work with. . Code review. | We took about it in the previous post but talk to your peer about code you wrote to make it more readable. . ### Working strategies. . Don’t make it personal | . We always think it&#39;s faster to rewrite it from scratch than try to understand what other developers did.Please, don’t judge other developers and speak badly about code even it worst code you ever have seen. . Testing | . Automated unit tests will give developer understanding about key things: dependencies this piece of code has, input data, output results, boundary conditions so on. From here you can walk in the minefield. . Start small | . It always seems like a disaster at first, Fear is your worst enemy in facing legacy code. You must start from somewhere. Small bug fixes or even change variable names that make code more meaningful that makes working with old code infinitely easier. . Make your checklist | . Checklists it underestimated but guess what it works all the time make your checklist, “Identify changes, find test points, break dependencies, write test, make a change and refactor. . Image sources Photo courtesy of Pascal. .",
            "url": "https://abodacs.github.io/abodacs.github.io/legacy%20code/2016/07/27/dealing-with-legacy-code.html",
            "relUrl": "/legacy%20code/2016/07/27/dealing-with-legacy-code.html",
            "date": " • Jul 27, 2016"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This is where you put the contents of your About page. Like all your pages, it’s in Markdown format. . This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://abodacs.github.io/abodacs.github.io/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

}